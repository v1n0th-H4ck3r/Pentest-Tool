import asyncio
import aiohttp

async def check_subdomain(session, subdomain, url):
    full_url = f"https://{subdomain.strip()}.{url.strip()}"
    try:
        async with session.get(full_url) as response:
            if response.status == 200:
                print(f"{full_url} exists!✅")
            else:
                print(f"{full_url} returned a status code of {response.status}")
    except aiohttp.ClientError:
        print(f"{full_url} does not exist or can't be reached.❌")

async def process_subdomains(url, subdomains, semaphore):
    async with semaphore:
        async with aiohttp.ClientSession() as session:
            tasks = [check_subdomain(session, subdomain, url) for subdomain in subdomains]
            await asyncio.gather(*tasks)

def main():
    url = input("Enter domain name: ")
    subdomains = [subdomain.strip() for subdomain in open('subd.txt', 'r')]
    concurrency = 100  # Adjust the concurrency level as needed
    semaphore = asyncio.Semaphore(concurrency)
    loop = asyncio.get_event_loop()
    tasks = [process_subdomains(url, subdomains[i:i + concurrency], semaphore) for i in range(0, len(subdomains), concurrency)]
    loop.run_until_complete(asyncio.gather(*tasks))  # This line changed
    loop.close()  # Added to explicitly close the event loop

if __name__ == "__main__":
    main()
